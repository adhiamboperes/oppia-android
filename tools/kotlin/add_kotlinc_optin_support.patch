--- src/main/starlark/core/repositories/configured_rules.bzl
+++ src/main/starlark/core/repositories/configured_rules.bzl
@@ -1,6 +1,56 @@
 def _rules_repository_impl(repository_ctx):
     attr = repository_ctx.attr
     repository_ctx.extract(attr.archive)
+    repository_ctx.file(
+        "provided.patch",
+        content = """
+--- kotlin/opts.bzl
++++ kotlin/opts.bzl
+@@ -1,3 +1,6 @@
++def _map_optin_class_to_flag(values):
++    return ["-opt-in=%s" % v for v in values]
++
+ _KOPTS = {
+     "warn": struct(
+         args = dict(
+@@ -121,6 +124,16 @@
+             True: ["-Xmulti-platform"],
+         },
+     ),
++    # Add support for opt-in values per https://github.com/bazelbuild/rules_kotlin/blob/0b75e942e444ccced07cfec50cbc8d925821ed57/src/rkt_1_6/starlark/kotlin/opts.bzl#L196-L204.
++    "x_optin": struct(
++        args = dict(
++            default = [],
++            doc = "Define APIs to opt-in to.",
++        ),
++        type = attr.string_list,
++        value_to_flag = None,
++        map_value_to_flag = _map_optin_class_to_flag,
++    ),
+ }
+
+ KotlincOptions = provider(
+@@ -158,10 +171,14 @@
+     if not kotlinc_options:
+         return ""
+
++    # Updated to support new map_value_to_flag per https://github.com/bazelbuild/rules_kotlin/blob/0b75e942e444ccced07cfec50cbc8d925821ed57/src/main/starlark/core/options/convert.bzl#L3.
+     flags = []
+     for n, o in _KOPTS.items():
+         value = getattr(kotlinc_options, n, None)
+-        flag = o.value_to_flag.get(value, None)
++        if o.value_to_flag:
++            flag = o.value_to_flag.get(value, None)
++        else:
++            flag = o.map_value_to_flag(value)
+         if flag:
+             flags.extend(flag)
+     return flags
+
+        """,
+        executable = False
+    )
+    repository_ctx.patch("provided.patch")

 rules_repository = repository_rule(
     implementation = _rules_repository_impl,
